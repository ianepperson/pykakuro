.. pykakuro documentation master file, created by
   sphinx-quickstart on Sat Apr  3 01:17:54 2010.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to pykakuro's documentation!
====================================

pykakuro is a set of python-based tools that can be used to generate and solve
(some) Kakuro puzzles.

.. currentmodule:: kakuro

Generating puzzles
==================

Random puzzles of arbitrary size can be generated by calling this function:

.. autofunction:: new_puzzle

Puzzles are initially generated in the solved state. If you don't want to see
the solution you can *unsolve* the puzzle before printing it.::

  >>> puzzle = kakuro.new_puzzle(4,4,seed=10)
  >>> puzzle.unsolve()
  >>> print puzzle
   0  |0,11| 0  | 0  |
  ----+----+----+----+
  2,0 | 1  | 0  |0,8 |
  ----+----+----+----+
  9,0 | 1  |6,5 | 1  |
  ----+----+----+----+
   0  |7,0 | 1  | 1  |
  ----+----+----+----+

In this case, cells where a number belongs have a "1" and cells with no number
have a "0".

Due to the inherent difficulty of solving Kakuro puzzles, pykakuro is able to
generate puzzles much bigger than it can actually solve.

Solving puzzles
==================

Pykakuro can solve the puzzles it generates if they are not too big; just call
the solve method on the puzzle::

  >>> puzzle.solve()

Since puzzles generated by pykakuro are initially solved this is not too
interesting. You might be more interested to solving some already existing
puzzle.  Before you can do this you need to represent the puzzle in a form that
pykakuro understands.

Kakuro boards don't really lend themselves to being drawn in ASCII, but we'll
give it a shot. Here's a board the way you might see it drawn in a puzzle
book::

       |\ |\
       |7\|6\
    |\4|  |  |
    |4\|--+--+
  \7|  |  |  |
   \|--|--+--+
  \6|  |  |  |
   \|--+--+--+

To represent the board, we use a 0 for the cells that don't take a number and
a 1 for the cells that do. Constraint squares are a tuple of two integers,
with the first being the constraint ACROSS and the second being the
constraint DOWN. If no constraint is specified for a particular direction,
the integer should be 0. Here is the puzzle shown above in this format::

   0 | 0 |0,7|0,6|
  ---+---+---+---+
   0 |4,4| 1 | 1 |
  ---+---+---+---+
  7,0| 1 | 1 | 1 |
  ---+---+---+---+
  6,0| 1 | 1 | 1 |
  ---+---+---+---+

And here is the same puzzle encoded in the canonical format used by this
program::

  sample_puzzle = (0 ,   0 ,(0,7),(0,6),
                   0 ,(4,4),   1 ,   1 ,
                (7,0),   1 ,   1 ,   1 ,
                (6,0),   1 ,   1 ,   1 ,
                  )

Now that the puzzle is encoded correctly, the program can solve it::

  >>> result = kakuro.solve(sample_puzzle, 4)
  [0, 0, (0, 7), (0, 6), 0, (4, 4), 1, 3, (7, 0), 1, 4, 2, (6, 0), 3, 2, 1]

In the grid form, the solution looks like this::

  >>> print kakuro.pretty_print(result,4)
   0 | 0 |0,7|0,6|
  ---+---+---+---+
   0 |4,4| 1 | 3 |
  ---+---+---+---+
  7,0| 1 | 4 | 2 |
  ---+---+---+---+
  6,0| 3 | 2 | 1 |
  ---+---+---+---+

If you prefer the OO-approach, you can use the Kakuro object to accomplish the
same things.::

  >>> puzzle = kakuro.Kakuro(sample_puzzle, 4)
  >>> puzzle.solve()
  >>> print puzzle
   0 | 0 |0,7|0,6|
  ---+---+---+---+
   0 |4,4| 1 | 3 |
  ---+---+---+---+
  7,0| 1 | 4 | 2 |
  ---+---+---+---+
  6,0| 3 | 2 | 1 |
  ---+---+---+---+


Module Reference
==================

.. automodule:: kakuro
   :members:
   :undoc-members:

Contents:

.. toctree::
   :maxdepth: 2


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

